{"ast":null,"code":"/**\n * Validates if a string is a valid Google Docs URL\n * @param url The URL to validate\n * @returns boolean indicating if the URL is a valid Google Docs URL\n */\nexport const isValidGoogleDocsUrl = url => {\n  try {\n    const urlObj = new URL(url);\n    const isValidHost = ['docs.google.com', 'drive.google.com'].includes(urlObj.hostname);\n\n    // Check for Google Docs document path\n    const isDocsPath = urlObj.pathname.includes('/document/d/');\n\n    // Check for Google Drive document path\n    const isDrivePath = urlObj.hostname === 'drive.google.com' && (urlObj.pathname.startsWith('/file/d/') || urlObj.searchParams.has('id'));\n    return isValidHost && (isDocsPath || isDrivePath);\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Validates if a string is a valid URL\n * @param url The URL to validate\n * @returns boolean indicating if the string is a valid URL\n */\nexport const isValidUrl = url => {\n  try {\n    new URL(url);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Validates if a string is a valid image URL\n * @param url The URL to validate\n * @returns boolean indicating if the URL points to a valid image\n */\nexport const isValidImageUrl = url => {\n  if (!isValidUrl(url)) {\n    return false;\n  }\n\n  // Check for common image file extensions\n  const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg'];\n  const urlLower = url.toLowerCase();\n\n  // Check if URL ends with an image extension\n  const hasImageExtension = imageExtensions.some(ext => urlLower.endsWith(ext));\n\n  // Check if URL is from a known image hosting service\n  const imageHosts = ['i.imgur.com', 'imgur.com', 'images.unsplash.com', 'drive.google.com/uc?', 'lh3.googleusercontent.com', 'i.ibb.co'];\n  const isFromImageHost = imageHosts.some(host => urlLower.includes(host));\n  return hasImageExtension || isFromImageHost;\n};","map":{"version":3,"names":["isValidGoogleDocsUrl","url","urlObj","URL","isValidHost","includes","hostname","isDocsPath","pathname","isDrivePath","startsWith","searchParams","has","e","isValidUrl","isValidImageUrl","imageExtensions","urlLower","toLowerCase","hasImageExtension","some","ext","endsWith","imageHosts","isFromImageHost","host"],"sources":["D:/web dev/Ashu_blog/frontend-new/src/utils/validation.ts"],"sourcesContent":["/**\n * Validates if a string is a valid Google Docs URL\n * @param url The URL to validate\n * @returns boolean indicating if the URL is a valid Google Docs URL\n */\nexport const isValidGoogleDocsUrl = (url: string): boolean => {\n  try {\n    const urlObj = new URL(url);\n    const isValidHost = [\n      'docs.google.com',\n      'drive.google.com',\n    ].includes(urlObj.hostname);\n\n    // Check for Google Docs document path\n    const isDocsPath = urlObj.pathname.includes('/document/d/');\n    \n    // Check for Google Drive document path\n    const isDrivePath = urlObj.hostname === 'drive.google.com' && \n      (urlObj.pathname.startsWith('/file/d/') || urlObj.searchParams.has('id'));\n\n    return isValidHost && (isDocsPath || isDrivePath);\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Validates if a string is a valid URL\n * @param url The URL to validate\n * @returns boolean indicating if the string is a valid URL\n */\nexport const isValidUrl = (url: string): boolean => {\n  try {\n    new URL(url);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Validates if a string is a valid image URL\n * @param url The URL to validate\n * @returns boolean indicating if the URL points to a valid image\n */\nexport const isValidImageUrl = (url: string): boolean => {\n  if (!isValidUrl(url)) {\n    return false;\n  }\n  \n  // Check for common image file extensions\n  const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg'];\n  const urlLower = url.toLowerCase();\n  \n  // Check if URL ends with an image extension\n  const hasImageExtension = imageExtensions.some(ext => urlLower.endsWith(ext));\n  \n  // Check if URL is from a known image hosting service\n  const imageHosts = [\n    'i.imgur.com',\n    'imgur.com',\n    'images.unsplash.com',\n    'drive.google.com/uc?',\n    'lh3.googleusercontent.com',\n    'i.ibb.co'\n  ];\n  \n  const isFromImageHost = imageHosts.some(host => urlLower.includes(host));\n  \n  return hasImageExtension || isFromImageHost;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,oBAAoB,GAAIC,GAAW,IAAc;EAC5D,IAAI;IACF,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAACF,GAAG,CAAC;IAC3B,MAAMG,WAAW,GAAG,CAClB,iBAAiB,EACjB,kBAAkB,CACnB,CAACC,QAAQ,CAACH,MAAM,CAACI,QAAQ,CAAC;;IAE3B;IACA,MAAMC,UAAU,GAAGL,MAAM,CAACM,QAAQ,CAACH,QAAQ,CAAC,cAAc,CAAC;;IAE3D;IACA,MAAMI,WAAW,GAAGP,MAAM,CAACI,QAAQ,KAAK,kBAAkB,KACvDJ,MAAM,CAACM,QAAQ,CAACE,UAAU,CAAC,UAAU,CAAC,IAAIR,MAAM,CAACS,YAAY,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC;IAE3E,OAAOR,WAAW,KAAKG,UAAU,IAAIE,WAAW,CAAC;EACnD,CAAC,CAAC,OAAOI,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAIb,GAAW,IAAc;EAClD,IAAI;IACF,IAAIE,GAAG,CAACF,GAAG,CAAC;IACZ,OAAO,IAAI;EACb,CAAC,CAAC,OAAOY,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,eAAe,GAAId,GAAW,IAAc;EACvD,IAAI,CAACa,UAAU,CAACb,GAAG,CAAC,EAAE;IACpB,OAAO,KAAK;EACd;;EAEA;EACA,MAAMe,eAAe,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;EAC1E,MAAMC,QAAQ,GAAGhB,GAAG,CAACiB,WAAW,CAAC,CAAC;;EAElC;EACA,MAAMC,iBAAiB,GAAGH,eAAe,CAACI,IAAI,CAACC,GAAG,IAAIJ,QAAQ,CAACK,QAAQ,CAACD,GAAG,CAAC,CAAC;;EAE7E;EACA,MAAME,UAAU,GAAG,CACjB,aAAa,EACb,WAAW,EACX,qBAAqB,EACrB,sBAAsB,EACtB,2BAA2B,EAC3B,UAAU,CACX;EAED,MAAMC,eAAe,GAAGD,UAAU,CAACH,IAAI,CAACK,IAAI,IAAIR,QAAQ,CAACZ,QAAQ,CAACoB,IAAI,CAAC,CAAC;EAExE,OAAON,iBAAiB,IAAIK,eAAe;AAC7C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}