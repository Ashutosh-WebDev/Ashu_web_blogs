{"ast":null,"code":"/**\n * Validates if a string is a valid Google Docs URL\n * @param url The URL to validate\n * @returns boolean indicating if the URL is a valid Google Docs URL\n */export const isValidGoogleDocsUrl=url=>{try{const urlObj=new URL(url);const isValidHost=['docs.google.com','drive.google.com'].includes(urlObj.hostname);// Check for Google Docs document path\nconst isDocsPath=urlObj.pathname.includes('/document/d/');// Check for Google Drive document path\nconst isDrivePath=urlObj.hostname==='drive.google.com'&&(urlObj.pathname.startsWith('/file/d/')||urlObj.searchParams.has('id'));return isValidHost&&(isDocsPath||isDrivePath);}catch(e){return false;}};/**\n * Validates if a string is a valid URL\n * @param url The URL to validate\n * @returns boolean indicating if the string is a valid URL\n */export const isValidUrl=url=>{try{new URL(url);return true;}catch(e){return false;}};/**\n * Validates if a string is a valid image URL\n * @param url The URL to validate\n * @returns boolean indicating if the URL points to a valid image\n */export const isValidImageUrl=url=>{if(!url)return false;try{// Basic URL validation\nnew URL(url);// Check for common image file extensions\nconst imageExtensions=['.jpg','.jpeg','.png','.gif','.webp','.svg','.avif'];const urlLower=url.toLowerCase();// Check if URL ends with an image extension\nconst hasImageExtension=imageExtensions.some(ext=>urlLower.endsWith(ext)||urlLower.includes(`${ext}?`)||urlLower.includes(`${ext}&`));// Check if URL is from a known image hosting service\nconst imageHosts=['i.imgur.com','imgur.com','images.unsplash.com','drive.google.com','lh3.googleusercontent.com','i.ibb.co','corsproxy.io','images.weserv.nl','picsum.photos','source.unsplash.com','placekitten.com','picsum.photos'];const isFromImageHost=imageHosts.some(host=>urlLower.includes(host));// If it's a data URL (base64 encoded image)\nconst isDataUrl=urlLower.startsWith('data:image/');// Allow any URL that passes basic validation and either has an image extension, is from a known host, or is a data URL\nreturn hasImageExtension||isFromImageHost||isDataUrl;}catch(e){return false;}};","map":{"version":3,"names":["isValidGoogleDocsUrl","url","urlObj","URL","isValidHost","includes","hostname","isDocsPath","pathname","isDrivePath","startsWith","searchParams","has","e","isValidUrl","isValidImageUrl","imageExtensions","urlLower","toLowerCase","hasImageExtension","some","ext","endsWith","imageHosts","isFromImageHost","host","isDataUrl"],"sources":["D:/web dev/Ashu_web_blogs/frontend-new/src/utils/validation.ts"],"sourcesContent":["/**\n * Validates if a string is a valid Google Docs URL\n * @param url The URL to validate\n * @returns boolean indicating if the URL is a valid Google Docs URL\n */\nexport const isValidGoogleDocsUrl = (url: string): boolean => {\n  try {\n    const urlObj = new URL(url);\n    const isValidHost = [\n      'docs.google.com',\n      'drive.google.com',\n    ].includes(urlObj.hostname);\n\n    // Check for Google Docs document path\n    const isDocsPath = urlObj.pathname.includes('/document/d/');\n    \n    // Check for Google Drive document path\n    const isDrivePath = urlObj.hostname === 'drive.google.com' && \n      (urlObj.pathname.startsWith('/file/d/') || urlObj.searchParams.has('id'));\n\n    return isValidHost && (isDocsPath || isDrivePath);\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Validates if a string is a valid URL\n * @param url The URL to validate\n * @returns boolean indicating if the string is a valid URL\n */\nexport const isValidUrl = (url: string): boolean => {\n  try {\n    new URL(url);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Validates if a string is a valid image URL\n * @param url The URL to validate\n * @returns boolean indicating if the URL points to a valid image\n */\nexport const isValidImageUrl = (url: string): boolean => {\n  if (!url) return false;\n  \n  try {\n    // Basic URL validation\n    new URL(url);\n    \n    // Check for common image file extensions\n    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg', '.avif'];\n    const urlLower = url.toLowerCase();\n    \n    // Check if URL ends with an image extension\n    const hasImageExtension = imageExtensions.some(ext => \n      urlLower.endsWith(ext) || \n      urlLower.includes(`${ext}?`) ||\n      urlLower.includes(`${ext}&`)\n    );\n    \n    // Check if URL is from a known image hosting service\n    const imageHosts = [\n      'i.imgur.com',\n      'imgur.com',\n      'images.unsplash.com',\n      'drive.google.com',\n      'lh3.googleusercontent.com',\n      'i.ibb.co',\n      'corsproxy.io',\n      'images.weserv.nl',\n      'picsum.photos',\n      'source.unsplash.com',\n      'placekitten.com',\n      'picsum.photos'\n    ];\n    \n    const isFromImageHost = imageHosts.some(host => urlLower.includes(host));\n    \n    // If it's a data URL (base64 encoded image)\n    const isDataUrl = urlLower.startsWith('data:image/');\n    \n    // Allow any URL that passes basic validation and either has an image extension, is from a known host, or is a data URL\n    return hasImageExtension || isFromImageHost || isDataUrl;\n  } catch (e) {\n    return false;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,oBAAoB,CAAIC,GAAW,EAAc,CAC5D,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAC,GAAG,CAACF,GAAG,CAAC,CAC3B,KAAM,CAAAG,WAAW,CAAG,CAClB,iBAAiB,CACjB,kBAAkB,CACnB,CAACC,QAAQ,CAACH,MAAM,CAACI,QAAQ,CAAC,CAE3B;AACA,KAAM,CAAAC,UAAU,CAAGL,MAAM,CAACM,QAAQ,CAACH,QAAQ,CAAC,cAAc,CAAC,CAE3D;AACA,KAAM,CAAAI,WAAW,CAAGP,MAAM,CAACI,QAAQ,GAAK,kBAAkB,GACvDJ,MAAM,CAACM,QAAQ,CAACE,UAAU,CAAC,UAAU,CAAC,EAAIR,MAAM,CAACS,YAAY,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC,CAE3E,MAAO,CAAAR,WAAW,GAAKG,UAAU,EAAIE,WAAW,CAAC,CACnD,CAAE,MAAOI,CAAC,CAAE,CACV,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,UAAU,CAAIb,GAAW,EAAc,CAClD,GAAI,CACF,GAAI,CAAAE,GAAG,CAACF,GAAG,CAAC,CACZ,MAAO,KAAI,CACb,CAAE,MAAOY,CAAC,CAAE,CACV,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAE,eAAe,CAAId,GAAW,EAAc,CACvD,GAAI,CAACA,GAAG,CAAE,MAAO,MAAK,CAEtB,GAAI,CACF;AACA,GAAI,CAAAE,GAAG,CAACF,GAAG,CAAC,CAEZ;AACA,KAAM,CAAAe,eAAe,CAAG,CAAC,MAAM,CAAE,OAAO,CAAE,MAAM,CAAE,MAAM,CAAE,OAAO,CAAE,MAAM,CAAE,OAAO,CAAC,CACnF,KAAM,CAAAC,QAAQ,CAAGhB,GAAG,CAACiB,WAAW,CAAC,CAAC,CAElC;AACA,KAAM,CAAAC,iBAAiB,CAAGH,eAAe,CAACI,IAAI,CAACC,GAAG,EAChDJ,QAAQ,CAACK,QAAQ,CAACD,GAAG,CAAC,EACtBJ,QAAQ,CAACZ,QAAQ,CAAC,GAAGgB,GAAG,GAAG,CAAC,EAC5BJ,QAAQ,CAACZ,QAAQ,CAAC,GAAGgB,GAAG,GAAG,CAC7B,CAAC,CAED;AACA,KAAM,CAAAE,UAAU,CAAG,CACjB,aAAa,CACb,WAAW,CACX,qBAAqB,CACrB,kBAAkB,CAClB,2BAA2B,CAC3B,UAAU,CACV,cAAc,CACd,kBAAkB,CAClB,eAAe,CACf,qBAAqB,CACrB,iBAAiB,CACjB,eAAe,CAChB,CAED,KAAM,CAAAC,eAAe,CAAGD,UAAU,CAACH,IAAI,CAACK,IAAI,EAAIR,QAAQ,CAACZ,QAAQ,CAACoB,IAAI,CAAC,CAAC,CAExE;AACA,KAAM,CAAAC,SAAS,CAAGT,QAAQ,CAACP,UAAU,CAAC,aAAa,CAAC,CAEpD;AACA,MAAO,CAAAS,iBAAiB,EAAIK,eAAe,EAAIE,SAAS,CAC1D,CAAE,MAAOb,CAAC,CAAE,CACV,MAAO,MAAK,CACd,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}