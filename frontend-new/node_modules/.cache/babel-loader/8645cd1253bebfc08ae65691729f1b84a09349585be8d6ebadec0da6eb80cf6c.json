{"ast":null,"code":"/**\n * Validates if a string is a valid Google Docs URL\n * @param url The URL to validate\n * @returns boolean indicating if the URL is a valid Google Docs URL\n */\nexport const isValidGoogleDocsUrl = url => {\n  try {\n    const urlObj = new URL(url);\n    const isValidHost = ['docs.google.com', 'drive.google.com'].includes(urlObj.hostname);\n\n    // Check for Google Docs document path\n    const isDocsPath = urlObj.pathname.includes('/document/d/');\n\n    // Check for Google Drive document path\n    const isDrivePath = urlObj.hostname === 'drive.google.com' && (urlObj.pathname.startsWith('/file/d/') || urlObj.searchParams.has('id'));\n    return isValidHost && (isDocsPath || isDrivePath);\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Validates if a string is a valid URL\n * @param url The URL to validate\n * @returns boolean indicating if the string is a valid URL\n */\nexport const isValidUrl = url => {\n  try {\n    new URL(url);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Validates if a string is a valid image URL\n * @param url The URL to validate\n * @returns boolean indicating if the URL points to a valid image\n */\nexport const isValidImageUrl = url => {\n  return new Promise(resolve => {\n    if (!isValidUrl(url)) {\n      resolve(false);\n      return;\n    }\n    const img = new Image();\n    img.onload = () => resolve(true);\n    img.onerror = () => resolve(false);\n    img.src = url;\n\n    // Set a timeout in case the image takes too long to load\n    setTimeout(() => {\n      if (!img.complete) {\n        resolve(false);\n      }\n    }, 5000);\n  });\n};","map":{"version":3,"names":["isValidGoogleDocsUrl","url","urlObj","URL","isValidHost","includes","hostname","isDocsPath","pathname","isDrivePath","startsWith","searchParams","has","e","isValidUrl","isValidImageUrl","Promise","resolve","img","Image","onload","onerror","src","setTimeout","complete"],"sources":["D:/web dev/Ashu_blog/frontend-new/src/utils/validation.ts"],"sourcesContent":["/**\n * Validates if a string is a valid Google Docs URL\n * @param url The URL to validate\n * @returns boolean indicating if the URL is a valid Google Docs URL\n */\nexport const isValidGoogleDocsUrl = (url: string): boolean => {\n  try {\n    const urlObj = new URL(url);\n    const isValidHost = [\n      'docs.google.com',\n      'drive.google.com',\n    ].includes(urlObj.hostname);\n\n    // Check for Google Docs document path\n    const isDocsPath = urlObj.pathname.includes('/document/d/');\n    \n    // Check for Google Drive document path\n    const isDrivePath = urlObj.hostname === 'drive.google.com' && \n      (urlObj.pathname.startsWith('/file/d/') || urlObj.searchParams.has('id'));\n\n    return isValidHost && (isDocsPath || isDrivePath);\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Validates if a string is a valid URL\n * @param url The URL to validate\n * @returns boolean indicating if the string is a valid URL\n */\nexport const isValidUrl = (url: string): boolean => {\n  try {\n    new URL(url);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Validates if a string is a valid image URL\n * @param url The URL to validate\n * @returns boolean indicating if the URL points to a valid image\n */\nexport const isValidImageUrl = (url: string): Promise<boolean> => {\n  return new Promise((resolve) => {\n    if (!isValidUrl(url)) {\n      resolve(false);\n      return;\n    }\n\n    const img = new Image();\n    img.onload = () => resolve(true);\n    img.onerror = () => resolve(false);\n    img.src = url;\n    \n    // Set a timeout in case the image takes too long to load\n    setTimeout(() => {\n      if (!img.complete) {\n        resolve(false);\n      }\n    }, 5000);\n  });\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,oBAAoB,GAAIC,GAAW,IAAc;EAC5D,IAAI;IACF,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAACF,GAAG,CAAC;IAC3B,MAAMG,WAAW,GAAG,CAClB,iBAAiB,EACjB,kBAAkB,CACnB,CAACC,QAAQ,CAACH,MAAM,CAACI,QAAQ,CAAC;;IAE3B;IACA,MAAMC,UAAU,GAAGL,MAAM,CAACM,QAAQ,CAACH,QAAQ,CAAC,cAAc,CAAC;;IAE3D;IACA,MAAMI,WAAW,GAAGP,MAAM,CAACI,QAAQ,KAAK,kBAAkB,KACvDJ,MAAM,CAACM,QAAQ,CAACE,UAAU,CAAC,UAAU,CAAC,IAAIR,MAAM,CAACS,YAAY,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC;IAE3E,OAAOR,WAAW,KAAKG,UAAU,IAAIE,WAAW,CAAC;EACnD,CAAC,CAAC,OAAOI,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAIb,GAAW,IAAc;EAClD,IAAI;IACF,IAAIE,GAAG,CAACF,GAAG,CAAC;IACZ,OAAO,IAAI;EACb,CAAC,CAAC,OAAOY,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,eAAe,GAAId,GAAW,IAAuB;EAChE,OAAO,IAAIe,OAAO,CAAEC,OAAO,IAAK;IAC9B,IAAI,CAACH,UAAU,CAACb,GAAG,CAAC,EAAE;MACpBgB,OAAO,CAAC,KAAK,CAAC;MACd;IACF;IAEA,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;IACvBD,GAAG,CAACE,MAAM,GAAG,MAAMH,OAAO,CAAC,IAAI,CAAC;IAChCC,GAAG,CAACG,OAAO,GAAG,MAAMJ,OAAO,CAAC,KAAK,CAAC;IAClCC,GAAG,CAACI,GAAG,GAAGrB,GAAG;;IAEb;IACAsB,UAAU,CAAC,MAAM;MACf,IAAI,CAACL,GAAG,CAACM,QAAQ,EAAE;QACjBP,OAAO,CAAC,KAAK,CAAC;MAChB;IACF,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}