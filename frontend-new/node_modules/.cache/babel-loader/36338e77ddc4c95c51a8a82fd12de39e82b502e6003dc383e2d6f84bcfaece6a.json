{"ast":null,"code":"import api from '../api';\n// Type guard to check if error is an AxiosError\nfunction isAxiosError(error) {\n  return error.isAxiosError === true;\n}\nexport const getBlogs = async () => {\n  try {\n    const response = await api.get('/api/blogs');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching blogs:', error);\n    if (isAxiosError(error)) {\n      if (error.response) {\n        const responseData = error.response.data;\n        const enhancedError = new Error((responseData === null || responseData === void 0 ? void 0 : responseData.message) || 'Failed to fetch blogs');\n        enhancedError.status = error.response.status;\n        throw enhancedError;\n      } else if (error.request) {\n        throw new Error('No response received from server');\n      }\n    }\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error('An unknown error occurred while fetching blogs');\n  }\n};\nexport const getBlogById = async id => {\n  try {\n    const response = await api.get(`/api/blogs/${id}`);\n    if (!response.data.success) {\n      const error = new Error(response.data.message || 'Failed to fetch blog');\n      error.code = response.data.error;\n      throw error;\n    }\n    return response.data.data;\n  } catch (error) {\n    console.error(`Error fetching blog with id ${id}:`, error);\n\n    // Type guard to check if error is an Axios error\n    if (isAxiosError(error)) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        const responseData = error.response.data;\n        const enhancedError = new Error((responseData === null || responseData === void 0 ? void 0 : responseData.message) || 'Failed to fetch blog');\n        enhancedError.code = (responseData === null || responseData === void 0 ? void 0 : responseData.error) || 'UNKNOWN_ERROR';\n        enhancedError.status = error.response.status;\n        throw enhancedError;\n      } else if (error.request) {\n        // The request was made but no response was received\n        const enhancedError = new Error('No response received from server');\n        enhancedError.code = 'NO_RESPONSE';\n        throw enhancedError;\n      }\n    }\n\n    // Handle non-Axios errors or rethrow if we can't handle it\n    if (error instanceof Error) {\n      const enhancedError = new Error(error.message || 'Error setting up request');\n      enhancedError.code = error.code || 'REQUEST_ERROR';\n      throw enhancedError;\n    }\n\n    // If we get here, it's an unknown error type\n    const unknownError = new Error('An unknown error occurred');\n    unknownError.code = 'UNKNOWN_ERROR';\n    throw unknownError;\n  }\n};\nexport const createBlog = async blogData => {\n  try {\n    const formData = new FormData();\n\n    // Append all fields from blogData to formData\n    Object.entries(blogData).forEach(([key, value]) => {\n      if (key === 'image' && value instanceof File) {\n        formData.append('image', value);\n      } else if (value !== undefined && value !== null) {\n        formData.append(key, String(value));\n      }\n    });\n    const response = await api.post('/api/blogs', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    if (!response.data.success) {\n      const error = new Error(response.data.message || 'Failed to create blog');\n      error.code = response.data.error;\n      throw error;\n    }\n    return response.data.data;\n  } catch (error) {\n    console.error('Error creating blog:', error);\n    if (isAxiosError(error)) {\n      if (error.response) {\n        const responseData = error.response.data;\n        const enhancedError = new Error((responseData === null || responseData === void 0 ? void 0 : responseData.message) || 'Failed to create blog');\n        enhancedError.code = (responseData === null || responseData === void 0 ? void 0 : responseData.error) || 'CREATE_BLOG_ERROR';\n        enhancedError.status = error.response.status;\n        throw enhancedError;\n      } else if (error.request) {\n        throw new Error('No response received from server while creating blog');\n      }\n    }\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error('An unknown error occurred while creating the blog');\n  }\n};\nexport const updateBlog = async (id, blogData) => {\n  try {\n    // If blogData is already a FormData object, use it directly\n    const data = blogData instanceof FormData ? blogData : new FormData();\n\n    // If blogData is a plain object, convert it to FormData\n    if (!(blogData instanceof FormData)) {\n      Object.entries(blogData).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'image' && value instanceof FileList && value.length > 0) {\n            data.append('image', value[0]);\n          } else {\n            data.append(key, String(value));\n          }\n        }\n      });\n    }\n    const response = await api.put(`/api/blogs/${id}`, data, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating blog with id ${id}:`, error);\n    throw error;\n  }\n};\nexport const deleteBlog = async id => {\n  try {\n    await api.delete(`/api/blogs/${id}`);\n  } catch (error) {\n    console.error(`Error deleting blog with id ${id}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","isAxiosError","error","getBlogs","response","get","data","console","responseData","enhancedError","Error","message","status","request","getBlogById","id","success","code","unknownError","createBlog","blogData","formData","FormData","Object","entries","forEach","key","value","File","append","undefined","String","post","headers","updateBlog","FileList","length","put","deleteBlog","delete"],"sources":["D:/web dev/Ashu_blog/frontend-new/src/services/blogService.ts"],"sourcesContent":["import { Blog, BlogFormData } from '../types';\nimport api from '../api';\nimport { AxiosError } from 'axios';\n\n// Type guard to check if error is an AxiosError\nfunction isAxiosError(error: unknown): error is AxiosError {\n  return (error as AxiosError).isAxiosError === true;\n}\n\nexport const getBlogs = async (): Promise<Blog[]> => {\n  try {\n    const response = await api.get('/api/blogs');\n    return response.data;\n  } catch (error: unknown) {\n    console.error('Error fetching blogs:', error);\n    \n    if (isAxiosError(error)) {\n      if (error.response) {\n        const responseData = error.response.data as { message?: string };\n        const enhancedError = new Error(\n          responseData?.message || 'Failed to fetch blogs'\n        );\n        (enhancedError as any).status = error.response.status;\n        throw enhancedError;\n      } else if (error.request) {\n        throw new Error('No response received from server');\n      }\n    }\n    \n    if (error instanceof Error) {\n      throw error;\n    }\n    \n    throw new Error('An unknown error occurred while fetching blogs');\n  }\n};\n\nexport const getBlogById = async (id: string): Promise<Blog> => {\n  try {\n    const response = await api.get(`/api/blogs/${id}`);\n    \n    if (!response.data.success) {\n      const error = new Error(response.data.message || 'Failed to fetch blog');\n      (error as any).code = response.data.error;\n      throw error;\n    }\n    \n    return response.data.data;\n  } catch (error: unknown) {\n    console.error(`Error fetching blog with id ${id}:`, error);\n    \n    // Type guard to check if error is an Axios error\n    if (isAxiosError(error)) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        const responseData = error.response.data as { message?: string; error?: string };\n        const enhancedError = new Error(\n          responseData?.message || 'Failed to fetch blog'\n        );\n        (enhancedError as any).code = responseData?.error || 'UNKNOWN_ERROR';\n        (enhancedError as any).status = error.response.status;\n        throw enhancedError;\n      } else if (error.request) {\n        // The request was made but no response was received\n        const enhancedError = new Error('No response received from server');\n        (enhancedError as any).code = 'NO_RESPONSE';\n        throw enhancedError;\n      }\n    }\n    \n    // Handle non-Axios errors or rethrow if we can't handle it\n    if (error instanceof Error) {\n      const enhancedError = new Error(error.message || 'Error setting up request');\n      (enhancedError as any).code = (error as any).code || 'REQUEST_ERROR';\n      throw enhancedError;\n    }\n    \n    // If we get here, it's an unknown error type\n    const unknownError = new Error('An unknown error occurred');\n    (unknownError as any).code = 'UNKNOWN_ERROR';\n    throw unknownError;\n  }\n};\n\nexport const createBlog = async (blogData: BlogFormData): Promise<Blog> => {\n  try {\n    const formData = new FormData();\n    \n    // Append all fields from blogData to formData\n    Object.entries(blogData).forEach(([key, value]) => {\n      if (key === 'image' && value instanceof File) {\n        formData.append('image', value);\n      } else if (value !== undefined && value !== null) {\n        formData.append(key, String(value));\n      }\n    });\n    \n    const response = await api.post('/api/blogs', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    \n    if (!response.data.success) {\n      const error = new Error(response.data.message || 'Failed to create blog');\n      (error as any).code = response.data.error;\n      throw error;\n    }\n    \n    return response.data.data;\n  } catch (error: unknown) {\n    console.error('Error creating blog:', error);\n    \n    if (isAxiosError(error)) {\n      if (error.response) {\n        const responseData = error.response.data as { message?: string; error?: string };\n        const enhancedError = new Error(\n          responseData?.message || 'Failed to create blog'\n        );\n        (enhancedError as any).code = responseData?.error || 'CREATE_BLOG_ERROR';\n        (enhancedError as any).status = error.response.status;\n        throw enhancedError;\n      } else if (error.request) {\n        throw new Error('No response received from server while creating blog');\n      }\n    }\n    \n    if (error instanceof Error) {\n      throw error;\n    }\n    \n    throw new Error('An unknown error occurred while creating the blog');\n  }\n};\n\nexport const updateBlog = async (id: string, blogData: Partial<BlogFormData> | FormData): Promise<Blog> => {\n  try {\n    // If blogData is already a FormData object, use it directly\n    const data = blogData instanceof FormData ? blogData : new FormData();\n    \n    // If blogData is a plain object, convert it to FormData\n    if (!(blogData instanceof FormData)) {\n      Object.entries(blogData).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'image' && value instanceof FileList && value.length > 0) {\n            data.append('image', value[0]);\n          } else {\n            data.append(key, String(value));\n          }\n        }\n      });\n    }\n    \n    const response = await api.put(`/api/blogs/${id}`, data, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating blog with id ${id}:`, error);\n    throw error;\n  }\n};\n\nexport const deleteBlog = async (id: string): Promise<void> => {\n  try {\n    await api.delete(`/api/blogs/${id}`);\n  } catch (error) {\n    console.error(`Error deleting blog with id ${id}:`, error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}