{"ast":null,"code":"import axios from 'axios';\n\n// Create an Axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true,\n  // Important for sending cookies with requests\n  xsrfHeaderName: 'X-CSRF-Token',\n  xsrfCookieName: 'XSRF-TOKEN'\n});\n\n// Add a request interceptor to include the auth token in requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  // Handle common errors (e.g., 401 Unauthorized)\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Only redirect to login if not already on login or register page\n    const currentPath = window.location.pathname;\n    if (!currentPath.includes('/login') && !currentPath.includes('/register')) {\n      localStorage.removeItem('token');\n      // Store the current location to redirect back after login\n      sessionStorage.setItem('redirectAfterLogin', currentPath);\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","withCredentials","xsrfHeaderName","xsrfCookieName","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","currentPath","window","location","pathname","includes","removeItem","sessionStorage","setItem","href"],"sources":["D:/web dev/Ashu_blog/frontend-new/src/api.ts"],"sourcesContent":["import axios, { AxiosInstance, InternalAxiosRequestConfig } from 'axios';\n\n// Create an Axios instance with default config\nconst api: AxiosInstance = axios.create({\n  baseURL: 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  withCredentials: true, // Important for sending cookies with requests\n  xsrfHeaderName: 'X-CSRF-Token',\n  xsrfCookieName: 'XSRF-TOKEN',\n});\n\n// Add a request interceptor to include the auth token in requests\napi.interceptors.request.use(\n  (config: InternalAxiosRequestConfig) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers = config.headers || {} as any;\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle common errors (e.g., 401 Unauthorized)\n    if (error.response?.status === 401) {\n      // Only redirect to login if not already on login or register page\n      const currentPath = window.location.pathname;\n      if (!currentPath.includes('/login') && !currentPath.includes('/register')) {\n        localStorage.removeItem('token');\n        // Store the current location to redirect back after login\n        sessionStorage.setItem('redirectAfterLogin', currentPath);\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAqD,OAAO;;AAExE;AACA,MAAMC,GAAkB,GAAGD,KAAK,CAACE,MAAM,CAAC;EACtCC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ,CAAC;EACDC,eAAe,EAAE,IAAI;EAAE;EACvBC,cAAc,EAAE,cAAc;EAC9BC,cAAc,EAAE;AAClB,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAkC,IAAK;EACtC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACP,OAAO,GAAGO,MAAM,CAACP,OAAO,IAAI,CAAC,CAAQ;IAC5CO,MAAM,CAACP,OAAO,CAACW,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,GAAG,CAACO,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT;EACA,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ;IAC5C,IAAI,CAACH,WAAW,CAACI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAACJ,WAAW,CAACI,QAAQ,CAAC,WAAW,CAAC,EAAE;MACzEb,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC;MAChC;MACAC,cAAc,CAACC,OAAO,CAAC,oBAAoB,EAAEP,WAAW,CAAC;MACzDC,MAAM,CAACC,QAAQ,CAACM,IAAI,GAAG,QAAQ;IACjC;EACF;EACA,OAAOb,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}