{"ast":null,"code":"import api from '../api';\nexport const getBlogs = async () => {\n  try {\n    const response = await api.get('/api/blogs');\n    return response.data || [];\n  } catch (error) {\n    console.error('Error fetching blogs:', error);\n    throw error;\n  }\n};\nexport const getBlogById = async id => {\n  try {\n    const response = await api.get(`/api/blogs/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching blog with id ${id}:`, error);\n    throw error;\n  }\n};\nexport const createBlog = async blogData => {\n  try {\n    const formData = new FormData();\n\n    // Append all fields from blogData to formData\n    Object.entries(blogData).forEach(([key, value]) => {\n      if (key === 'image' && value instanceof File) {\n        formData.append('image', value);\n      } else if (value !== undefined && value !== null) {\n        formData.append(key, String(value));\n      }\n    });\n    const response = await api.post('/api/blogs', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating blog:', error);\n    throw error;\n  }\n};\nexport const updateBlog = async (id, blogData) => {\n  try {\n    // If blogData is already a FormData object, use it directly\n    const data = blogData instanceof FormData ? blogData : new FormData();\n\n    // If blogData is a plain object, convert it to FormData\n    if (!(blogData instanceof FormData)) {\n      Object.entries(blogData).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'image' && value instanceof FileList && value.length > 0) {\n            data.append('image', value[0]);\n          } else {\n            data.append(key, String(value));\n          }\n        }\n      });\n    }\n    const response = await api.put(`/api/blogs/${id}`, data, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating blog with id ${id}:`, error);\n    throw error;\n  }\n};\nexport const deleteBlog = async id => {\n  try {\n    await api.delete(`/api/blogs/${id}`);\n  } catch (error) {\n    console.error(`Error deleting blog with id ${id}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","getBlogs","response","get","data","error","console","getBlogById","id","createBlog","blogData","formData","FormData","Object","entries","forEach","key","value","File","append","undefined","String","post","headers","updateBlog","FileList","length","put","deleteBlog","delete"],"sources":["D:/web dev/Ashu_blog/frontend-new/src/services/blogService.ts"],"sourcesContent":["import { Blog, BlogFormData } from '../types';\nimport api from '../api';\n\nexport const getBlogs = async (): Promise<Blog[]> => {\n  try {\n    const response = await api.get('/api/blogs');\n    return response.data || [];\n  } catch (error) {\n    console.error('Error fetching blogs:', error);\n    throw error;\n  }\n};\n\nexport const getBlogById = async (id: string): Promise<Blog> => {\n  try {\n    const response = await api.get(`/api/blogs/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching blog with id ${id}:`, error);\n    throw error;\n  }\n};\n\nexport const createBlog = async (blogData: BlogFormData): Promise<Blog> => {\n  try {\n    const formData = new FormData();\n    \n    // Append all fields from blogData to formData\n    Object.entries(blogData).forEach(([key, value]) => {\n      if (key === 'image' && value instanceof File) {\n        formData.append('image', value);\n      } else if (value !== undefined && value !== null) {\n        formData.append(key, String(value));\n      }\n    });\n    \n    const response = await api.post('/api/blogs', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating blog:', error);\n    throw error;\n  }\n};\n\nexport const updateBlog = async (id: string, blogData: Partial<BlogFormData> | FormData): Promise<Blog> => {\n  try {\n    // If blogData is already a FormData object, use it directly\n    const data = blogData instanceof FormData ? blogData : new FormData();\n    \n    // If blogData is a plain object, convert it to FormData\n    if (!(blogData instanceof FormData)) {\n      Object.entries(blogData).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'image' && value instanceof FileList && value.length > 0) {\n            data.append('image', value[0]);\n          } else {\n            data.append(key, String(value));\n          }\n        }\n      });\n    }\n    \n    const response = await api.put(`/api/blogs/${id}`, data, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating blog with id ${id}:`, error);\n    throw error;\n  }\n};\n\nexport const deleteBlog = async (id: string): Promise<void> => {\n  try {\n    await api.delete(`/api/blogs/${id}`);\n  } catch (error) {\n    console.error(`Error deleting blog with id ${id}:`, error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}