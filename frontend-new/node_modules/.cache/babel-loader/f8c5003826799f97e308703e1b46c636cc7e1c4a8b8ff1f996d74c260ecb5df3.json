{"ast":null,"code":"import axios from'axios';// Define the API error response type\n// Create an Axios instance with default config\nconst api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:5000',headers:{'Content-Type':'application/json','Accept':'application/json','X-Requested-With':'XMLHttpRequest'},withCredentials:true,// Important for sending cookies with requests\nxsrfHeaderName:'X-CSRF-Token',xsrfCookieName:'XSRF-TOKEN'});// Add a request interceptor to include the auth token in requests\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){// Ensure headers object exists\nconfig.headers=config.headers||{};// Add the Authorization header with Bearer token\nconfig.headers['Authorization']=`Bearer ${token}`;}console.log('Sending request to:',config.url);return config;},error=>{console.error('Request error:',error);return Promise.reject(error);});// Add a response interceptor to handle common errors\napi.interceptors.response.use(response=>{console.log('Response received:',response.config.url,response.status);return response;},error=>{var _error$config,_errorData$error;const errorResponse=error.response;const errorData=(errorResponse===null||errorResponse===void 0?void 0:errorResponse.data)||{};console.error('API Error:',{url:(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,status:errorResponse===null||errorResponse===void 0?void 0:errorResponse.status,statusText:errorResponse===null||errorResponse===void 0?void 0:errorResponse.statusText,data:errorData});// Handle common errors (e.g., 401 Unauthorized)\nif((errorResponse===null||errorResponse===void 0?void 0:errorResponse.status)===401){// Only redirect to login if not already on login or register page\nconst currentPath=window.location.pathname;if(!currentPath.includes('/login')&&!currentPath.includes('/register')){localStorage.removeItem('token');// Store the current location to redirect back after login\nsessionStorage.setItem('redirectAfterLogin',currentPath);window.location.href='/login';}}// Return a more detailed error message\nconst errorMessage=errorData.message||(typeof errorData.error==='string'?errorData.error:(_errorData$error=errorData.error)===null||_errorData$error===void 0?void 0:_errorData$error.message)||'An error occurred';return Promise.reject({message:errorMessage,status:errorResponse===null||errorResponse===void 0?void 0:errorResponse.status,data:errorData,originalError:error});});export default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","withCredentials","xsrfHeaderName","xsrfCookieName","interceptors","request","use","config","token","localStorage","getItem","console","log","url","error","Promise","reject","response","status","_error$config","_errorData$error","errorResponse","errorData","data","statusText","currentPath","window","location","pathname","includes","removeItem","sessionStorage","setItem","href","errorMessage","message","originalError"],"sources":["D:/web dev/Ashu_web_blogs/frontend-new/src/api.ts"],"sourcesContent":["import axios, { AxiosInstance, InternalAxiosRequestConfig, AxiosError } from 'axios';\n\n// Define the API error response type\ninterface ApiErrorResponse {\n  message?: string;\n  error?: string | { message?: string };\n  [key: string]: any;\n}\n\n// Create an Axios instance with default config\nconst api: AxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'X-Requested-With': 'XMLHttpRequest',\n  },\n  withCredentials: true, // Important for sending cookies with requests\n  xsrfHeaderName: 'X-CSRF-Token',\n  xsrfCookieName: 'XSRF-TOKEN',\n});\n\n// Add a request interceptor to include the auth token in requests\napi.interceptors.request.use(\n  (config: InternalAxiosRequestConfig) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Ensure headers object exists\n      config.headers = config.headers || {} as any;\n      // Add the Authorization header with Bearer token\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    console.log('Sending request to:', config.url);\n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => {\n    console.log('Response received:', response.config.url, response.status);\n    return response;\n  },\n  (error: AxiosError<ApiErrorResponse>) => {\n    const errorResponse = error.response;\n    const errorData = errorResponse?.data || {};\n    \n    console.error('API Error:', {\n      url: error.config?.url,\n      status: errorResponse?.status,\n      statusText: errorResponse?.statusText,\n      data: errorData\n    });\n\n    // Handle common errors (e.g., 401 Unauthorized)\n    if (errorResponse?.status === 401) {\n      // Only redirect to login if not already on login or register page\n      const currentPath = window.location.pathname;\n      if (!currentPath.includes('/login') && !currentPath.includes('/register')) {\n        localStorage.removeItem('token');\n        // Store the current location to redirect back after login\n        sessionStorage.setItem('redirectAfterLogin', currentPath);\n        window.location.href = '/login';\n      }\n    }\n    \n    // Return a more detailed error message\n    const errorMessage = \n      errorData.message || \n      (typeof errorData.error === 'string' ? errorData.error : errorData.error?.message) || \n      'An error occurred';\n    return Promise.reject({\n      message: errorMessage,\n      status: errorResponse?.status,\n      data: errorData,\n      originalError: error\n    });\n  }\n);\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}